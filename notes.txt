
DERS 1: Angular nedir?? 


Angular::> Web uygulama mimarisidir. SPA(Single page application) , yuksek performansli cunku tek sayfadan yuklenerek calisir.

NG Terminal Commands: 

--ng version : Kullanilan angular versiyonu 
--ng new : sade bir sablonda  yeni bir angular uygulamasi oluşturur.
--ng generate : yapi taslarinin uretilmesini saglar.
--ng generate/g component/c "componentName" : yeni komponenetolusturmak icin kullanilir.
--ng generate/g directive/d "directiveName" : directive olusturma talimati
--ng generate/g directive/d "directives/directiveName" : klasor altinda directive olusturma talimati

--ng serve : Angular uygulamasinin ayaga kalrilmasinin saglar.
--ng serve -- port 1111 : uygulamayi default port 4200 degilde 1111 protundan calistirmak icin kullanilir.
--ng build : angular uygulamasinin build edilmesini sagler.




NG Mimarisi >>>>

    --node_modules :: node pakatlerini tutan klasor
    --src :: uygulamanin en oonemli klasoru 
            -/app
                *app-routing.module.ts :: sayfalar arasindaki baglanti routlarini tutan dosya.
                *app.component.html :: uygulamanin ana componentidir. 
                *app.component.ts :: codeladigimiz dosya C#'taki controller.
                *app.module.ts :: Uygulamanin ana module'udur. 
            -asset :: uygulama icinde resim icon vs bunun icinde bulunur.
            -index.html :: kullanilan ana html single page.
            -main.ts :: c#'taki program.cs
    --package-lock.json :: uygulamada kullanilan paketlerin versionlarinin takip edildigi dosya.
    --angular.json :: Uygulamayla ilgili script, stylei budgets gibi temel configleri iceren dosya. 
    --editor.config :: Editor ayarlarini iceren dosyamiz

 ================================================================================================================================
 
 DERS 2: Angular Mimarisinin yapisi nasildir??

 Modules : Uygulamanin cesitli parcalarini bir araya getirerek butun olarak kullanimini saglar.

            -Dep. inj. ile birbileri arasindan bagimliliklari test edilebilir. 

 Componentker : HTML ve TS dosyalarindan olusurlar. component uygulamanin butun islemsel yapilarini ifade ederler. 
            -orn, product page'i bir sayfadir ve fıtrati componenttir.
            - Data binding ozelligi sayesinde ts ve html uzerindeki veriler birbirinebaglanir.
            - ihtiyac duyduklarini servis instancelari dep. Inj. ile dahil edilebilir. 


        Data Binding :: Angularda Databinding two way data binding olarak calisir. Yani hem html'den hem de TS'ten birbirini degistirebilir.

        Dependency Injection :: Angular mimarisi uygulamada mevcut  olan bagimliliklari yoneyebilmek icin dependency injection patern kullanmaktadir.

        Directives :: HTML nesnelerinin davranislarini gorunumlarini yonetebilmemizi saglatan ozel etiketlerdir. 
                      Uygulamayi dinamik ve etkilisimli hale getirirler.

        Decorators :: TS ozelligidir. İslevsel olarak componentin nasil bir yapiya sahip oldugunu belirtir.

        Services :: Angular'da genellikle dis servislerle (API endpoint) iletisim kurmak, karmasik is operastonalrini veya business logic'i yurutmek yahut componentler arasinda iletisim saglayabilmek icin kullanilan fiili yapilanmalardir.
                     Tum operasyonal yani fili kodlama gerektiren islemler servislerda yapilmaktadir.

        Template :: Componentlarin HMTL kısımlaridir. HTML kodlari barindirabilecegi gibi ozel Angular elemanlari da baridirabiliriler.

        Guards :: Route erisimlerinin izin kontrolleri guard yapilanmasi uzerinden gerceklestirilmektekdir. 
                  Sayfalar arasi gecis sureclerinde ilgili kullacinin erisimine izin verilip verilmedigi kontrol eden sistemlerdir. 

        Pipelar :: verilerin goruntuenme sureclerinde islenmesine islecsellk saglayan yapilardir.

 1

   --Componentler sayfalari olusturmamizi saglayan yapilardir. App klasoru icinde tutulur. 
   --Angular uygulamasinda olusan ilk component baslangic komponenti olarak degerlendirilir. 
   --bootstrap: [AppComponent] //burada tanimlanan component uygulamanin ana component oldugunu belirtir.

   Components :: * Sayfa altyapilaridir. Bunun disinda sayfa olarak kullanillan componentlerin alt componentleri olarak da kullanilabilmektedir. 
                 * Sayfa zaten bir componenet bu sayfdanin alt componentleri yani alt elemanlari da olabilmektdir. 
                 * Her component birbirinden bagimsiz calisabilmektedir. 
                 * BOL PARCALA YONET. 

    :: {coded notes} ::
        selector: 'app-root',//html'de cagirilirken kullanilacak tag title.. Uygulamanin herhangi bir yarinden nasil cagiralacagini bildiren kisimdir. 
        // templateUrl: './app.component.html', //Componentin gorsel calismarilinin yaoildigi parcadir -- icerisinde html esliginde directive pipe gibi angular ozelliklerini calistirebilecek yaoidadir. 
        template: '<p>Merhaba</p>, {{title}}',
        //componentin asil parcasidir. API gibi dis servislere atilan istekler de bu claslar uzerinden yapilir. 
        HomeComponent //olusturulan componentin kullanilabilmesi icin ana modulde, declaration kısmında belirtilmesi gerekir. 
    :: {coded notes} ::
    
    Metadata Decarator :: componentin nasıl ypılandirılacagi ve nasıl kullanilacagini tanimlayan birdecaratordir. Bu decoratorler selector, style ce templatedısında animations inputs ve output gibi fieldlarla de modifiye edilebilir. 


    !!!OLUSTURULAN COMPONENTİN UYGULAMADA KULLANILABILMESI ICIN ANA MODULE DECLARE EDILMESI GEREKMEKTEDIR. YUKARIDA ILGILI NOTTAN TAKIP ET.!!!


================================================================================================================================

DERS 4: DATA BINDING 

    Binding nedir: component bir modelin veya fonksiyonun tamplatedeki bir alan ya da DOM nesnesi ile canli olarak baglanti kuran nesne. 
     
     -- Text interpolation : HTML kisminda dield property degerinin yazdirilmasi islemeni {{name}}
                             Name uzerindeki degisiklikler anlik olarak html'e aktarilacaktir.
     
     -- Property Binding : Template icindeki nesneleri veya directiveler icin Component Class'inda tanimli olan verilerin property olarak direkt baglanmasina saglayan yontemdir. [value] = "value"
                            Bu yontem sayesinde deger atamalari dah adinamik bir sekilde gerceklestirilmis olmaktadir. 
     
     -- Event Binding : Template icerisindeki herhangi bir DOM nesnesinin Component Class`i icinde tanimli olan bir fonksitona even olarak baglanir
                        Eventlere (ONCLICK CLICK VS) ts dosyasi uzerinden fonksiyon baglama islemidir.
                        herhangi bir keyword.shift.a gibi islemleride eventlere ts methoduna baglayabilirsin


     -- Two way binding : Template icindeki field propertynin anlik olarak hem view hemde controller uzerinden degistrilebilmesi islemidir.
                        [(ngModule)] kullanilabilmesi icin FormsModelu'n uygulamanin ana modulunde import edilmesi gerekmektedir.
                        ngModelChange event'i ile bir olayi tetikleyebilir ve boylece girilen bilgilerin de dogrulamasi icin calisma gerceklestirebilirsiniz.
     
     -- Attribute binding : HTML nesnesinin degerine component classinden veri gonderilmesini saglayan sistemdir.
     
     -- Class Binding : 
     
     -- Style Binding : 

    Chenge Detection algoritmasi == bu algoritma sayesinde veri degisikligi;nde component ve templet'n senkronize calismasina saglar.



================================================================================================================================

DERS 5: Interpolation Syntax Nedir??

{{...}} ?? Angularda component classi icindeki gerganhi bir field yahut propertinin HTML uzerinde goruntulenebilmesini saglayan operatordur

           Bu operatorumuz one-way data binding gerceklestirir.

           Neler Kullanilamaz!! == uygulamada sadece temp;late uzerinde gerekli bilgileri okumak icin kullanilir. property ve fieldlarin degerlerini degistirecek operatorler kullannilamaz
                                   new, typeodf, instanceof vs. keywordleri kullanilamaz!
                                   ; operatoru kullanilamaz.
                                   (++, --) operatorleri kullanilamaz.
                                   bitwise operatorleri kullanilamaz. 
        
            Interpolation operatorunde html ve script degiskenleri berilmeye calisilirsa bunlar string olarak sayfaya yansitilir.

            interpolation <p ngNonBindable > {{text}} dunya <\p> ngNonBindable operatoru kullnilarak interpolatin pasiflestirilerek string olarak gosterilir.


            Neler Kullanilir <3 == pipes, Nullable Operatoru `{{person?.name}}`, Non-Null Assertion operatoru `{{person!.name}}`.


================================================================================================================================

DERS 6: Directives nedir? Ne amacla kullanilmaktadir?

    HTML elemanlarin ekstra ozellikler ve davranislar eklemek icin kullanilan ozel etiketlerdir.

    Directive Nasil Kullanilir?
        HTML elemanina directive'in sellectorunu eklemek yeterlidir.
        Bildirilen directive ne is yapiyorsa bunu otomatik olarak DOM elemenina verek bu ozellikleri elemente kazandirabiliriz.

    Built-in Directives;
        
        *ngFor: HTML nesneleri uzerinde iterastonel islemler yapmak icin kullanilir. (*) structural directive
                keywords; index (), first, last, even, odd.
                
        ngIf: Verilan kosula gore HTML nesnelerinin gorunurlugunu koontrol etmek icin kullanilan temel bir Angular directive'i dir


        [ngSwitch]: verilen kosula gore HTML nesnelerinin gorunurlugunu yahut icerigini degistirmek icin kullanilan temel bir directive'dir. [] Custom bir  directivedir.


        ngClass: vermek istedigim classi aktarabildigim direktilve
        ngStyle: vermek istedigim stylei aktardigim directive


        ngModel
        ngNonBindable

================================================================================================================================

DERS 7: Custom Directive Nasil Olusturulur??

directive olusturma : --ng generate/g directive/d "directiveName" ; islem tamamlandiktan sonra ng CLI'yi yaptigi islemleri terminalde yazidirir.

    //example directive ve app component dosyalari uzerine ilgili notlar alindi


================================================================================================================================

DERS 8: Structural Directive yapilanmasi nedir??

    directivelr html elementi uzerinde manupilasyon islemleri yapmamizi saglayan yapilardir.
    Structural Directivelr HTML nesnesini ve DOM yapilarini fiziksel olarak manipule ederek sayfa uzerinde degisiklikler ypamamizi saglayan directivlerdir.
    "*" ile baslayan directivlerdir.
    Normal directiveler HTML DOM yapilarini etkilemezler.
      
      -- TemplateRef : Directive'in calistigi HTML nesnesini temsil eder.
      -- ViewContainerRef : Directive'in calistigi HTML nesnesinin containerini temsil eder.Bu kontiner icerisinden dinamik olarak HTML elemanlari eklemeye ya da cikarmaya izin verir. 

    Custom Structural Directive Olusturma :

        --


================================================================================================================================

DERS 9: PIPE NEDIR ? HAZIR PIPELAR NELERDIR?

    Bir verinin goruntulenme seklini degistirmek icin kullanilan bir angular'a ozel yapidir.
    Ornegin bir tarih verisinin belirli bir formatta gorunmesini gibi islemler yapilabilir. Bu tarz istiyaclara istinaden verinin orjilanlligi bozmadan gorsel bir kisimda makyaj/manipulasyon yapmamizi saglar.
    
    BUILT-IN PIPELAR
        --CurrencyPipe : verilen degeri para birimi biciminde gosterir.
        --ger' kalan app.component.html dosyasi uzerinde ornekler bulunmaktadir.
        
    --ng g p pipeName : pipe olusturma komutu


================================================================================================================================

DERS 10: COMPONENT COMMUNICATION | PARENT TO CHILD / CHILD TO PARENT

    Angular mimarisinda componentler arasi iletisim saglayabilmek icin Input ve Output decoratorleri kullanilir.
    Child component herhangi bir componentin icinde selector keyi ile referans edilen componente denir.

    ParentToChild : parent'tan child'a veri gonderirlerken kullanilan communicationdir. "Input" decoratoru ile saglanir.
    ChildToParent : child'tan parent'a veri gonderirlerken kullanilan communicationdir. "Output" decoratoru ile saglanir.

    component klasoru arasinda communication orneklerini bulabilirsin.

    --parent'tan childa veri gonderilirken Attributes ve Methodlar gorev alir, child'tan parent'a veri gonderilirken ise Eventler gorev alir.    
        

================================================================================================================================

DERS 11: COMPONENT LIFE CYCLE HOOK NEDIR? EVENTLERI NELERDIR?

    Angular componentlerinin yasam dongusu icinde gerceklestirilen islemlerdir.

    -Componentin cagrildigi andan imha edildigi ana kadar gecen surec icinde gerceklestirilen islemlerdir. 
    Bunlar methodlardir ve bu methodlar Component'in veri guncellemesi, DOM ile etkilesime girmesi veya takip edilen berilerdeki degisimler gibi gorevleri terine getirmenize yardimci olabilirler. 

    -Methodlar::>

        (--Constructor :  ilk instance alindiginda tektilenir ve componentin olusturuldugu an tetiklenir.)

        --ngOnChanges : componentin input propertylerinde degisiklik oldugunda tetiklenir.
            -componentin input degiskenleri selektor referansi ucerinden degistigi durumlarda tetiklenir. 
            -onchanges interface uzerinden butun componentle implemente edilebilir.

        --ngOnInit : component olusturuldugunda tetiklenir.

        --ngDoCheck : componentin herhangi bir degisiklik kontrolu yapildiginda tetiklenir.
            -Angular componentinin guncellenmesi durumunda teklenen ve DoCheck interface'i ile cagirilan methoddur.

        --ngAfterContentInit : componentin contenti yani icerigi yuklendikten sonra tetiklenir.
            -<ng-content></ng-content> icindeki yani <app-component>...<app-component> arasindaki alanda degisiklik oldugunda tetiklenir
    
        --ngAfterContentChecked : componentin contentinde bir degisiklik oldugunda tetiklenir.
            -docheck'ten farklidir. docheck componentin tamamini kontrol ederken contentcheck ngcontent kisminin guncellemelerini takip eder.
        
        --ngAfterViewInit : componentin viewi yuklendikten sonra tetiklenir.
            -componentin tamamlanmasindan sonra tetiklenin tamamisyle yanina gectigini belirten etiket.
        
        --ngAfterViewChecked : componentin viewi yuklendikten sonra tetiklenir.
        
        --ngOnDestroy : component yok edildiginde tetiklenir.

    --ng g c lifeCycleHook : lifecycle hook ornegi icin component olusturuldu.

    Yorum: 
    1. amac componentin olusturuldu amac uzerine edindigi davranislardir.
    2. amac componentin durumlara gore anlik verebilecegi reflekslerdir. 


================================================================================================================================


DERS 12: ANGULAR FORMS Consepts & Approches

    Kullaniciladan veri alabilmek yada kullanicilarla etkilesime girebilmek icin kullanilan yapilardir.
        -Template-Driven Form yaklasimi : 
            --Kolay yoludur.
            --Form elemanlarinin her birinen 'ngModel' direktifi ile isaretleyerek calisma sergilemektedir.
            --#fmr="ngForm" ile formu referans edebiliriz. - ngModel ile form elemanlarini referans edebiliriz.
            --Formun tasarimini yapilandirmasini tamamen templete uzerinden gerceklestirir.

        -Model-Driven/Reactive Forms yaklasimi:
            -TD Formlara nazaran daha karmasik form islemleri icin uygun olan yaklasimdir.
            -Bu yaklasimda formun temel mantigi component ucerinde bir nesne olarak tanimlanir vve bu nesne HTML'deki  ilgili form itiketlerine bind edilir.
            -form elemanlari dinamik olarak ilgili nesne tarafindan takip edilir.
        
        -Konseptler: 
            -FormGroup:
                --Form elemanlarinin bir araya getirilmesi ile olusturulan bir nesnedir. Icinde form kontrol elemanlarini barindirir.
            -FormArray:
                --Form icerisinde dinamik olarak olusturulan kontrolleri temsil eden dizisel nesnelerdir.
                  (yetenek ekle gibi 1'den fazla alinabilecek veriler icin kullanilir)

            -FormControl:
                --Form icinde bulunan kullanicidan veri almamizi saglayacak tek bir controlu temsil eder.

            -FormBuilder:
                --FormGroup' FormControl ve FormArray nesnelerini olusturmamizi kolaylastiracak olan bir servistir. icerisinde hazir fonksiyonlar sayesinde formu hizlica uretebilmemizi ve konfigure tememizi saglar.

            
        FirmGroup vs FormArray :: | FormGroup benzer olmayan verileri tuttugumuz form uniteleri, FormArray ise benzer verileri tuttugumuz form uniteleridir. 
        
        TD Forms vs MD Forms :: | 
            --Veri Modeli: Veri modeli uzerinden MD Form , HTML sablonlari uzerinden TD Form yaklasimi .
            --Dogrulama: md forms yaklasimi bir formdaki butun dogrulama kurallarina tabi tutarken, TD Forms yaklasimi ise ngModel direktifi ile isaretlenenlari kontrol eder.
            --Kontrolun Bagimsizli: (bir kontrolun birden fazla form icinde kullanilabilmesi) kontrol bagimsizligi MD Forms yaklasiminda daha yuksektir. TD Forms yaklasiminda ise kontrol bagimsizligi daha dusuktur.
            --Test Edilebilirlik: MD daha iyi.
            --Karmasik yetkinligi: karmasik inputlama sureclerinde MD daha kuvvetli.

================================================================================================================================

DERS 13 :  TEMPLATE-DRIVEN FORM 

--ILGILI CALISMA TEMPLATE-DRIVEN FORM UZERINDE YAPILMISTIR. 


================================================================================================================================

DERS 13 :  TEMPLATE-DRIVEN FORM 

--ILGILI CALISMA MODEL-DRIVEN FORM UZERINDE YAPILMISTIR. 

    --Component class'inda formun yapisinin nesnel olarak tanimlandigi form yapisidir. yani form yapisinda kullanilan formgroup ,formarray,ve formcontrol gibi butun nesneleri kendimizin olusturdugu formu konfigure ettigi bir form yapilanmasidir.

    --Formun validastonel kurallariyla birlikte turlu yapilanmalarina da bu nesne uzerinde tanimlayabiliyoruz.

    Kullanilan Temel Direktive'ler ::

        --formGroup : formun icerisindeki form elemanlarini bir araya getirerek bir form yapisi olusturmak icin kullanilir.

        --formControlName : form icerisindeki form elemanlarini bir araya getirerek bir form yapisi olusturmak icin kullanilir. 

        --formArrayName : form icerisindeki form elemanlarini bir araya getirerek bir form yapisi olusturmak icin kullanilir.

    Model-Driven Forms Yaklasimiyla Form Olusturma Detaylari:: 
    
        --Gerekli form directive'leri ReactiveFormModule uzerinden import edilmelidir.

        --Ardinfan olusturulacak formun oncelikle modelini olustururuz ve gerekli formcontrol'leri tanimlariz. Bunun icin formbuilder nesnesini dependency injection yapariz..

        --'form' etiketini formGroup directive'i ile olusturulan model'le, form kontrollerini ise modeldeki ilgili FormControl'lerine formControlName directive'i ile baglanir.

        --Kullanici tarafindan doldurulan bu modelin gonderilebilmesi icin ngSubmit event'ine bir fonksiyon baglanir. Bu fonksiyon icerisinde formun gonderilmesi icin gerekli olan islemler gerceklestirilir.

        Validation Tanimlama: 
            --FormControl nesnesi uzerinden tanimlanir.
            --Validators nesnesi uzerinden tanimlanir.

onlyself: true, //sadece kendini kontrol et demek.

================================================================================================================================

DERS 15: CHANGING THE STATUS 


================================================================================================================================

DERS 16: VALIDATION NEDIR? 

    -form yapilanmalarinda inputun formatinin dogrulanmasi islemidir.

    validationlar sync validator ve async validators olmak uzere iki farkli yapiyla kontrol edilirler.

        --sync validator dogrulama calistirilir ve heme n ardindan geriye sonuc doner. Varsa gecersizlik hata listesi olarak dondurur yahut bir hata yoksa eger null dondururler 

        --async validatoralrda ise dogrulamalar promise veya obsevable dondururler subscribe olunabilir bir davranis sergilerler. 

    Built-in Validators::

        ReactiveFormsModule uzerinden import edilirler.
        Validators.required

        --min: minimum degeri belirler.
        --max: maximum degeri belirler.
        --required: bos gecilemez. 'Validators.required'
        --requiredTrue: true degeri gonderilmelidir. Genellikle checkboxlar uzerinde kullanilirlar. 
        --email: email formatinda olmali.
        --minlength: minimum uzunlugu belirler.
        --maxlength: maximum uzunlugu belirler.

    Dogrulama ve Hata Mesajlari ELlde Etme::

        -Bunun icin FormControl nesnelerinin errors propertusinden yapararlanilir.
        -Her form ogesinin validasin sureci neticesinde varsa hata kendisiyle iliskilendirilmis bir error nesnesi mevcut olacaktir. 
        
    Custom Validator Olusturma: 

        -Angular mimarisinda ValidatorFn interfaci ile custom validatorler olusturulabilir.
        -Geriye validationErrors  nesnesini ya da null deger donduren ve parametre olarak AbstractControl turunden deger alan bir fonksiyon gibi dusunulebilir
        
    Parametreli Custom Validator Olusturma ve Kullanma 

        -ilgili validator ts dosyasinda ornegi vardir.

    Asynv Validator

        -Yukaridaki butun validatorlar dogruma islemi tamamlandiktan sonra sonuc dondurmekte yani synv validator davranisi sergilemektedirler. 
        
        -Async validatorler ise promise yada observable dondurmekte ve bu nedenle subscribe olunabilir bir davranis sergilemektedirler.
        
        -genellikle bu validator yapisi dogrulama icin gerekli olan verilerin disbir servisten alindigi uzun soluklu surecler icin kullanilmaktadirlar. 
        
        -Ornek Case: kimlik no dogrulamasi. kullanicinin girmis oldugu kimlik bilgileri devlet servisleri uzerinden teyit alir. bu surec uzun soluklu bir surec oldugu icin async validator kullanilir. sonuc donusu baska isleme bagli olan ve ne kadar sureceegi kestirilemeyen durumlarda async validator kullanilir.

    Karsilastirma Validatorleri

        -iki kontrol karsilastirilip birbirine esit olup olmadiklarinin kontrol edilmesi islemidir. 

        -birden fazla kontrolde karsilastirma validatoru kullanilacaksa bu validatorler FormGroup uzerinden kullanilir.

    Dinamik Olarak Validator Ekleme ve Cikarma

        -FormControl nesnesi uzerinden setValidators/setAsyncValidators ve clearValidators methodlari ile dinamik olarak validator ekleme ve cikarma islemleri gerceklestirilebilir. Runtime validation degisikliklerin icin onemlidir. set validator uygunlandigi an diger validatorlar silinir. Bu yuzden olmasi gereken butun validatorlar hesaba katilmalidir. 

        -cleanValidators methodu ile validatorlerin hepsi silinebilir.

    Validator Durumlarini Guncelleme 
    
        -Dinamik olarak validatorlara mudahale ettigimizde updateValueAndValidity fonksiyonuyla ynei duruma gore validatorlarin calistirilmasi icin angular mimarisi zorlanabilir. Bu durumda updateValueAndValidity fonksiyonu ile validatorlarin calistirilmasi saglanabilir.

================================================================================================================================


DERS 17 : ANGULAR DEPENDENCY INJECTION

    -Dependency injection yapmis oldugumuz kodsal calismalarda yeniden kullanilabilir bir davranis sergilememizi saglayan design pettern dir.

    - Dependency Injection'in temel gayesi bu dependencyleri mumkun mertebe yonetilebilir bir hale getirmek ve kodsal degisiklik sureclerinde bagimliligin getirisi olan olasi direncleri neticesinde olabilecek hatalara karsi onlem alabilmektir. 

    -- Dependency Injection Nasil Uygulanir ?

        --Angular mimarisinin temelinde dahili olarak gelmektedir. 

        --Ihtiyac olan servis contructor method'ta newlenerek olusturdugu senaryoda tight coupling durumu olusmus olur. Bu servicete yapilan bir degisiklikte kullanan siniflarda degisiklik ihtiyaci olusturabilir. Bu gibi durumlardan kacinmak icin dependency injection kullanilir. Misal olarak servisimizn constructorina parametre vererek degistirdigimiz durumlarda veya bu sinifi test etmek istedigimiz senaryolarda ister istemez bu bagimliligin getirisi olan yan etkiler soz konusu olacaktir. Ayrica service'in kullanildigi product sinifina her ihtiyac duydugumuzda service'inde tekrar tekrar uretilmesi soz konusu olacaktir. Halbuki nesnenin s'gleton olarak b'r kere olusturulup ihtiyac duyuldugu yerlerde bu olusturulan service uzerinden kullanilmasi cok daha mantikli olacaktir. 

        --contructor(private productService: ProductServis) {} //bu sekilde bir constructor olusturulursa angular mimarisi tarafindan otomatik olarak bir instance olusturulur ve bu instance'i kullanabiliriz.

        --AppComponent tarafindan ihtiyac duyulan sinfi constructor uzerinden IoC Container'indan tabep etmis oluyoruz. Bu talebi gerceklestirebilmek icin ProductService'in bu calismanin yapildigi module'un providers alanina asagidaki gibi eklenmesi gerekmektedir. 

            *Providers : [ProductService]

    --Angular'da Dependency Injection Aktorler:

        - consumer : dependency injection yapilanmasindan yararlanan siniflardir.(component, directive, service.. )

        - dependency : consumer siniflarin ihtiyac duydugu servislerdir.

        - DI Token : dependency injection yapilanmasinda kullanilan bir anahtar kelimedir. Bu anahtar kelime uzerinden DI Container'a ihtiyac duyulan servislerin talep edilmesi saglanir.

        - provider : Injection Token esliginde depency'lerin tutuldugu yerdir. 

        - injector : DI Container'dir. DI Token esliginde provider'lari tutar.

    -Dependency Injection Kullanimi:

        - ilgili ts dosyalarina notlar alind 08-DependencyInjection klasoru altinda bulunmaktadir.
    

================================================================================================================================


DERS 18 : DEPENDENCY INJECTION V2

    -Injector Mekanizmasinin Detaylari:

        -Dependencyleri somutlastiran ve onlari ohtiyac noktalarina enjekte etmekle sorumlu olan yapilardir. 

        - Mudel Injector Tree:
            --modul seviyesinde provide edilecek servisler icin yapidir. 
            --Modeul seviyesinde @ngModule ve @Injectable decoratorleri ile olusturulurlar.
            --Null injector > platform module > root module > lazy module A/b

            --RootModule icerisinde hem one hem de uygulamadaki tum modullerin provede'larini ve provide'in ozelligi olarak yapilandirilmis servisleri icerir. 

        - Element Injector Tree:
            --Componen ve dirctivlere servis eklenmesi

    -Servislerin Provider'a eklenmesi

        -Dependencynin kaydedildigi yer bagimliligin erisim kapsamini tanimlar. 
        -Provider'larin 3 farkli yontemle eklenmesi mumkundur. 
            --Component Level
            --Module Level
            --Root Level

    @Injectable Decorator'i:

        -Angular'da bir sinifin servis olarak kullanilacagi ifade etmek icin @Injectable decoratoru kullanilmaktadir.


    @Indectable providedIn Parametresi: 

        -Injectable nasil inject edilecegini soyleyen parametredir. 

            --any: Service'lerin birden fazla instance olacak sekilde provide edilmasini saglar. Her module ici ayri instance uretecektir. Mikroduzey optimazasyonlar icin kullanilir.

            --platform: Angular Universal gibi platform bagimsiz uygulamalar icin tasarlanmis servislerde kullanilir. servislerin platfirmlara ozgu oldugunu ifade ederler.  Bu uygulamalarin hem server hem de client taraflarinda calisma modu gibi farkli kosullari mevcuttur. bu nedenle bir servis platdorma ozgu oldugunda her iki tarafta da farkli bir sekilde provide edilmesi gerekebilir. 

            --root:  Uygulamanin ana module;une servisi singleton olarak saglayacagini gosterir.

            @Injectable{providedIn:'root'}

        Provider'da ki Service Inject Inject Etme @Inject decoratoru.

            constructor(private productService: ProductService) { } -- Otomatik yontem
            constructor(@Inject(ProductService) private productService) { } -- Manuel yontem

        
================================================================================================================================


DERS 16: PROVIDE DETAYLARI, DI TOKEN VE PROVIDER TURLERI::

    -Povidera koyulan servislerin bir belirtec olan DI token ile alabiliriz.

    3 farkli token tipi vardir. Bunlar;

        --Type
        --InjectionToken
        --stringToken
    
    Ilgili dependencynin nasil olusturulacagina dair de konfigurasyonlar vardir bunlar;
    
        --useClass:
        
        --useValue : basit metinsel degerleri provide etmek icin kullanilir. 

        --useFactory: 
        --useExisting

    providers[{provide: ProductService, useClass: ProductService}] //bu sekilde bir provider tanimlamasi yapilirsa angular mimarisi tarafindan ProductService'in bir instance'i olusturulur ve bu instance'i kullanabiliriz.

    TypeToken:
        provide : DI Token olan yer.
        provider(useClass,useValue ...) : DI Token'in ne olacagini belirten yer. 

    StringToken: 
                providers : [{provide: "ProductService", useClass: ProductService}]
                constructor(@Inject("ProductService") private productService) { } -- Manuel yontem

    !!!USEVALUE vs USEFACTORY : Usevalue ile de bir fonsiyon dondurlebilir ancak bu donen fonksiyon class icinde kullanilacak salt fonksiyondur. use factory ile fonsiyonun returnu gor islem yaptiririz. 

    Aliased Class : 

        providers : [
            A,
            {provide: B, useClass: A},
            {provide: C, useExisting: A}]

        // ilk provider icin A instance olusturulur
        // ikinci provider icin de  A  instance olusturulur
        // ucuncu providera ilk provider'in instance'i inject edilir. 

DERS 20: DEPENDENCY INJECTION - IV - @SKIP -@SKIPSELF - @OPTIOMAL 

    -- @Self - @SkipSelf - @Optinonal : 
        
        -- @Self : Self decorator'da ilgili dependency yalnizca gecerli olan componentin yada directive'inin providerinda cagirildiysa kullanilmasina izin verir. .     (ornegi second component icinde bulunmaktadir.)

        (ilgili yapilarla alakali ornekler 10. ornek projede notlariyla birlikte aciklanmistir)
        
================================================================================================================================


DERS 21: ANGULARDA SERVICE NEDIR? NE AMACA HIZMET ETMEKTEDIR?

    -Fiili bir islem yoneten yani business logic sorumlulugu ustlenen yapilara service adi verilir. 
    -servis sayasinde componentte yapilan islemlerden kurtuluruz.
    -Angularda servicelerin isimsonuna Service olarak ekleme yapilir. 
    
    Service gorevleri : 

        -- Herhangi bir dis servisten yahut API'dan veri alabilir.
        -- uygulamanin genel state'ini tutabilir
        -- Componentler arasinda veri iletisimi saglanabilir. 

    Service Olusturma :

        -- @Injectable decoratoru ile isaretlenen bir sinif olusturulur. 
        -- ng g s/service services/Product // bu CLI ile ici bos injectable decoratoru ile isaretlenmis Sonu Service olarak isimlendirilmis Service adinda services klasoru altinda bir sinif olusturulur. 
    
    Service  Uzerinden Component Communication : 

        -Servislerin genellikle bir isleme ozel fiili sorumlulugun ustlenilmesinin disinfa birden gazla componet arasinda iletisimin saglanmasi gerektigi senaryolarda da kullanildigini gorebilirsiniz. 
        (Orneklendirme kod uzerinde yapilmistir.. 11. ornek proje...)


================================================================================================================================

        
DERS 22: ROUTING -I- TEMELLERI NELERDIR? NASIL YAPILANDIRILIR?

    Angular mimarisinde bir view'den digerine gidebilmek icin yada componenten digerine gecis yapabilmek icin kullanilan bir yapiya sahiptir.

    Angular Router bir moduldur ve @angular/router dizininde built-in olarak gelmektedir. bu modul route uzerinden componentler ver izerinde gezinti yapabilmemizi ve bunun icin gerekli olan tum service provider'larini saglamaktadir.

        -Adres cubugundan ilgili URL ile belirli bir componente getirmek.
        -component query string degerlerin gonderme.
        -browser'in ileri ve geri dugmelerini aktiflestirme/kullanilabilmektedir
        -dinamik olarak view yukleme.
        -rotalar uzerinde yetki kontrolu gerceklestirme.
    
    Angular Router Bilesenleri :

        Router: angular'da tarayici uzerinden geri ilere dugmelerini aktiflestiren ve componentler arasinda gezinilmesini saglayan yapidir. 

        Route: component ve view'ler arasinda gezinmeyi saglayan yapidir. her bir route bir ath ve o path ile eslesen bur componentten olusur. 

        Routes: Tum rotalari iceren bir dizi yapidir.

        Router Outlet: tarayicinin adres cubugundaki URL ile uyumlu olan route;un view'in hangi alanindagosterilecegini ifade eden yapi. 

        RouterLink: HTML ogesi olan a tag'ini toute'a baglayan direktiftir. 

        RouterLinkActive: RouterLink ile birlikte kullanilan baska bir direktiftir. kullanildigi a tag'one mevcut route durumuna dayali aktif bir css classi ekler.

        Activated Route : Component class'i uzerinden etkin URL'I elde etmemizi saglayan siniftir. O anki etkin route'u temsil eder. 

        Router State : Route uzerindeki tum bilgileri vedurumlari iceren bir nesnedir uygulamanin hangi rotda oldugunu ve rotanin nasil dagistigini takip etmemizi saglar.

    Angular Router Yapilandirilmasi: 

        1- <base href> ogesini ayarlama

            --Angular uygulamasinda bu etiket rotalarin belirlenmesinde kullanilacak olan temel UrL'i belirtir. Bu --uygulamadaki tum rotalarin kok dizinden degil belirtilen temel URL'den baslayacagini belirtir.
            --<base herf> etiketi uygulamadaki index.html dosyasinda head etiketinin icinde yer almalidir.

        2- Component icin rotalarin tnaimlanmasi

            --componentler icin rotolarin tanimlanmasi. (12. proje routes kalasoru icinde ornegi vardir.)

        3- Routelari kaydederek uygulamaya gecme 

            --Rotalari kaydederek uygulamaya gecirme RouterModule import edilmeli.APPMODULE
            RouterModule.forRoot(routes)

        4- yonlendirici rota/url ayarlama ve herhangi bir HTML nesnesi ile eslestirme

            sayfada nerede kullanilacaksa linkleri olusturma islemidir.
            <a routerLink="contact">Contacts</a>


        5- Yeni rotaya uygun component'in yuklenecegi alani belirleme 

            Son olarak yeni rotaya uygun component'in yuklnecegi alanin asagidaki gibi belirlenmesi gerekmektedir.
            <router-outlet></router-outlet>

    App Routing Modulunun Olusturulmasi: 

        angular uygulamasinda router yapilandirmasini biraz once gordugunu gibi uygulamanin herhangi bir yerinde tasarlanabilir ve kullanilabilir. 

        ama angular bunu uygulama olustururken kullaniciya sorarak default yuklamesini yapar

    RouterLink Parameters Array: 

        --RouterLink direktifi ile birlikte kullanilan parametrelerin bir dizi olarak tanimlanmasi gerekmektedir. 

        --<a [routerLink]="['/products', product.id]"> {{product.name}} </a> gibi bir kullanim soz konusudur. 
        (ornegi uygulamada mevcuttur)
    

    RouterLinkActive : 

        mevcut rotayla eslesen link dinamik olarak css eklememizi saglar.
            routerLinkActive="activeLink" //HTML'DE yerinde
            .activeLink{color:coral;} //CSS'de yeri

    Varsayilan Route Ayarlama: 
            
            --Uygulama ilk calistirildiginda hangi rotanin yuklenecegini belirlemek icin kullanilir. 
            --{path: '', redirectTo: 'products', pathMatch: 'full'} //bu sekilde bir tanimlama yapilirsa uygulama ilk calistirildiginda products rotasi yuklenecektir.

            buradaki pathmacth alani router'in utl'i nasil eslestireceginin kararini verdirmektedir. full ve prefixte degerleri alabilir. full : route tanimindaki yolun tamamiyla eslesmesini gerektirirken, prefix iser URL'in ornekle eslesmesini yeterli gormektedir. 

            Ornegin; full'de route tanimi '/users'  ise direk o url ile eslenecek, ama prefixte '/users' ise '/users/1' ile de eslesme saglayacaktir.

    Wildcard Route Ayarlama:
            -Joker Karakterli Yol olarak tarif edilir. '**'

================================================================================================================================

DERS 23: ROUTING - II -  LOCATION STRATEGIES -  PATH | HASH

    Router'da Location Stratedies Nedir? 

        -HashLocationStrategies # sembolu kullanir. Ozellikle esk itarayicilarda' URL degisikliklerinin algilanmasi ve yonlendirmelerin yapilmasi icin kullanilabilir.

        -PathLocationStrategy Normal URL'leri kullanarak yonlendirme yapar. ozellikle modern tarayicilarda tercih edilir. 

    Neden Bustrategilere Ihtiyacimiz Olacak?

        URL'ler local olarak kullanilmakta ve sadece tarayici tabanli bir davranis sergilenmektedir. 

    Client-Side Routing: 

        Multi page application olan bir uygulamanin bir sayfanin goruntulemesi gerektigi takdirde bu istegi sunucuya gondermesi gerekmektedir. Ancak angular uygulamalari single page applicationlardir. ve tum componentler tek bir sayfada goruntulanirler. 
        Simdi, Angular ana htmlde kullanilan taglar ilgili alana componentin dinamik bir sekilde yuklanmasini saglar, Bu davraniz bir routing davranisidir. Nede olsa sayfada Farkli bir sayfanin icerigi gomulmekte yani farkli bir sayfa tarayicida cagirilmaktadir.
        bu sebeple angularda tum bunlar arka planda gerceklesir. boylebir senaryoda URL ile bir davranis soz konusu degildir. 

        Dezavantajlari: 
            -URL bazli sayfa yenilemesi yapilmaz. 
            -URL kullanarak veri transferi yapilamaz. url'de veri tasinmaz
            -Tarayicidaki geri dogmesini kullanamazsiniz
            -SEO mumkun degildir. 
        
        Client Side Routig yonlendirme islemini tarayicida calistirarak sunucu tarafi yonlendirmesini taklit etmektedir. 
        Adres cubugundaki URL'i degistirmektedir ve tarayici gecmisini guncellemektedir. ancak butun bu islemleri gercekte sunucuya bir istek gondermeksizin saglamaktadir.

    HASH Style Routing: 

        Hash SR. URL'de # karakterinden sonra gelen bir dize kullanmaktadir. misal olarak; localhost:5/#/a-component gibi bir url yapisi olusturulur.

    Location Strategies : 

        PathLocationStrategy: 

            -Normal URL'leri kullanarak yonlendirme yapar. 
            -ozellikle modern tarayicilarda tercih edilir.
            Angularin default firmatidir. 

            Artilari: 
                -http://example.com/foo gibi url'ler urtir.
                -server-side rendering'i destekler.(SEO calismalari yapabilmemize destek saglar.)
                
            Eksileri: 
                -eski tarayicalarda desteklenmemektedir. 
                -Sunucu destegi gerekir.

        HashLocationStrategy: 

            artilari: 
                -eski tarayicilarla uyumludur.
                -Sunucu destegi gerekmez.

            eksileri:

                -/#foo gibi kirli URL'ler uretir.
                -Server-side Rendering'i desteklemez.


================================================================================================================================

DERS 24: ROUTING - III - ROUTE PARAMATERS

    Route Paramater Nedir? 

        -Route parametreleri, URL'de belirli bir yere yerlestirilen ve URL'den okunabilen degerlerdir. URL uzerinden deger tasinabilmesini saglayan yapilanmadir. 
    
    Route Paremetreleri Nasil Tanimlanir? 

        -Tanimlanan route icinde parametre alaninin belirlenmesi gerekir. 
            {path: 'products/:id', component: ProductDetailComponent}
            //burada :id parametresi tanimlanmistir.
            //'products/:id/:name/:package' gibi birden fazla parametre de tanimlanabilir.
        -Angularda route parametreleri nullable yapilamaz bu yuzden butun her view icin payri route olusturulmalidir.

        -Degiskeni asagidaki gibi okuyabilirsiniz. 
            <a [routerLink]="['/products', product.id]"> {{product.name}} </a>

    Observable Kullanarak URL Parametrelerini Okuma: 

        -ActivatedRoute Observable bir davranisla parametrelerini okumamizi saglayabilir.

    Peki Activated Route Parametre alirken hangisini kullanmaliyiz?

        snapshot: Tek seferlik bir yakalama gerekliyse snapshot kullanilabilir

        observable uzerinden takip yapmak mantikli. Static olarak guncel degerleri yakalamak icin observable mantikli.

================================================================================================================================

DERS 25: CHILD ROUTES / NESTED ROUTES: 

